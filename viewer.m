function viewer(DataNIRS)

Hmain = []; % handles to uicontrols and graphics
screenSize = get(0,'ScreenSize');
feature('DefaultCharacterSet', 'UTF8');

% Set main figure size
figureW = screenSize(3) * 3/4;   % Screen width in pixels
figureH = screenSize(4) * 3/4;   % Screen height in pixels
%figureRatio = figureW / figureH;

% Set UI objects size
%mainAxesWidth = .65;
%panelWidth = (1-mainAxesWidth) / 2;
stepW = 0.02;
stepH = 0.02;
panelaxesW = 1-2*stepW;
panelaxesH = 0.7;
npanels = 4;
panelW = (1-(npanels+1)*stepW)/npanels;
panelH = 1-panelaxesH-3*stepH;

% Set UI objects position
figurePosition = [screenSize(3)/2-figureW/2 screenSize(4)/2-figureH/2 figureW figureH];

% Set color theme
theme = 'dark';
switch theme
    case 'classic'
        backgroundColor = get(0,'DefaultUicontrolBackgroundcolor');
        foregroundColor = 'k';
        highlightColor = [211 211 211]/255;
    case 'dark'
        backgroundColor = [68 68 68]/255;
        foregroundColor = 'w';
        highlightColor = [92 92 92]/255;
end

% Set font
if ismac
    defaultFontName = 'Lucida Grande';
    if sum(strcmp(listfonts,defaultFontName)) < 1
        defaultFontName = 'Helvetica';
    end
elseif ispc
    defaultFontName = 'Lucida Sans Unicode';
    if sum(strcmp(listfonts,defaultFontName)) < 1
        defaultFontName = 'Helvetica';
    end
else
    defaultFontName = 'Helvetica';
end

% UI objects
Hmain.mainFigure = figure('Position', figurePosition, ...
    'Visible', 'on', ...
    'Resize', 'on',...
    'Name', 'Viewer', ...
    'Numbertitle', 'off', ...
    'Tag', 'sensors_viewer', ...
    'Color', backgroundColor, ...
    'Toolbar', 'none', ...
    'Menubar', 'none', ...
    'DoubleBuffer', 'on', ...
    'DockControls', 'off', ...
    'Renderer', 'OpenGL');

Hmain.menuFile = uimenu('Parent', Hmain.mainFigure, 'Label', 'File');
Hmain.menuFile_loadData = uimenu('Parent', Hmain.menuFile, ...
    'Label', 'Load Data...', ...
    'Callback', @load_data);
Hmain.menuFile_export = uimenu('Parent', Hmain.menuFile, ...
    'Label', 'Export');
Hmain.menuFile_export_export2png = uimenu('Parent', Hmain.menuFile_export, ...
    'Label', 'Export to png', ...
    'Callback', @export2png);
Hmain.menuFile_quit = uimenu('Parent', Hmain.menuFile, ...
    'Label', 'Quit', ...
    'Callback', {@closewindow, Hmain.mainFigure});

Hmain.menuEdit = uimenu('Parent', Hmain.mainFigure, 'Label', 'Edit');

Hmain.menuView = uimenu('Parent', Hmain.mainFigure, 'Label', 'View');
Hmain.menuView_openTable = uimenu('Parent', Hmain.menuView, ...
    'Label', 'Open Table...');

%Hmain.toolbar = uitoolbar('Parent', Hmain.mainFigure);

%% Panels
panellabels = {'Measure', 'Subject', 'Probe', 'Channel'};

labels = {...
          {'Measure ID', 'Duration (s)', 'Samples', 'Sampling Frequency (Hz)', 'ciao', 'sciao'}, ...
          {'pippo', 'pluto'}, ...
          {'topolino', 'paperino', 'qui', 'quo', 'qua'}, ...
          {'archimede'}, ...
         };

	 
value = {...
          {DataNIRS.MeasureID, DataNIRS.MeasureInfo.Duration, 'Samples', DataNIRS.MeasureInfo.AqInfo.UpdateRate, 'ciao', 'sciao'}, ...
          {'pippo', 'pluto'}, ...
          {'topolino', 'paperino', 'qui', 'quo', 'qua'}, ...
          {'archimede'}, ...
         }; 
	 
	 
npanels = length(panellabels);
panelwidth = (1-(npanels+1)*stepW)/npanels;

for jj = 1:1:npanels
    
    panel_position = [jj*stepW+(jj-1)*panelwidth stepH panelwidth panelH];
    Hmain.panel(jj).panel = uipanel('parent', Hmain.mainFigure,...
        'Position', panel_position, ...
        'Units', 'normalized', ...
        'BackgroundColor', backgroundColor, ...
        'ForegroundColor', foregroundColor, ...
        'HighlightColor', highlightColor, ...
        'ShadowColor', [211 211 211]/255, ...
        'BorderType', 'line', ...
        'FontWeight', 'bold', ...
        'FontSize', 8, ...
        'FontName', defaultFontName, ...
        'Visible', 'on', ...
        'Title', panellabels{jj});
    
    currentlabels = labels{1,jj};
	currentvalue = value{1,jj};
	
    nlines = length(currentlabels);
    boxheight = 1/(nlines+2);
    %labels = fliplr(labels);
    for ii = 1:1:nlines
        Hmain.panel(jj).label(ii) = uicontrol('Parent', Hmain.panel(jj).panel, ...
            'Style', 'text', ...
            'BackgroundColor', backgroundColor, ...
            'ForegroundColor', foregroundColor, ...
            'Units', 'normalized', ...
            'Position', [0.1 ii*boxheight 0.5 0.1], ...
            'FontWeight', 'bold', ...
            'FontAngle', 'italic', ...
            'HorizontalAlignment', 'left', ...
            'String', currentlabels{ii});
        Hmain.panel(jj).value(ii) = uicontrol('Parent', Hmain.panel(jj).panel, ...
            'Style', 'text', ...
            'BackgroundColor', backgroundColor, ...
            'ForegroundColor', foregroundColor, ...
            'Units', 'normalized', ...
            'Position', [0.7 ii*boxheight 0.2 0.1], ...
            'FontWeight', 'bold', ...
            'FontAngle', 'italic', ...
            'String', currentvalue{ii});
    end
end

%% Panel axes
panelaxes_position = [stepW panelH+2*stepH panelaxesW panelaxesH];
Hmain.panelaxes = uipanel('parent', Hmain.mainFigure,...
    'Position', panelaxes_position, ...
    'Units', 'normalized', ...
    'BackgroundColor', backgroundColor, ...
    'ForegroundColor', foregroundColor, ...
    'HighlightColor', highlightColor, ...
    'ShadowColor', [211 211 211]/255, ...
    'BorderType', 'line', ...
    'FontWeight', 'bold', ...
    'FontSize', 8, ...
    'FontName', defaultFontName, ...
    'Visible', 'on', ...
    'Title', 'Time series');

Hmain.mainAxes = axes('parent', Hmain.panelaxes,...
    'Position', [0.05 0.2 0.9 0.7], ...
    'Units', 'normalized', ...
    'Color', backgroundColor, ...
    'XColor', foregroundColor, ...
    'YColor', foregroundColor, ...
    'Xgrid', 'on', ...
    'Ygrid', 'on', ...
    'GridColor', foregroundColor, ...
    'FontWeight', 'bold', ...
    'FontSize', 8, ...
    'FontName', defaultFontName, ...
    'Visible', 'on', ...
    'Title', 'Main plots');

Hmain.mainAxes2 = axes('parent', Hmain.panelaxes,...
    'Position', [0.05 0.2 0.9 0.7], ...
    'Units', 'normalized', ...
    'Color', backgroundColor, ...
    'XColor', foregroundColor, ...
    'YColor', foregroundColor, ...
    'Xgrid', 'off', ...
    'Ygrid', 'off', ...
    'XAxisLocation','top',...
    'YAxisLocation','right',...
    'GridColor', foregroundColor, ...
    'FontWeight', 'bold', ...
    'FontSize', 8, ...
    'FontName', defaultFontName, ...
    'Visible', 'on', ...
    'Title', 'Main plots');

% Hmain.mainSlider = uicontrol('parent', Hmain.panelaxes,...
%     'Units', 'normalized', ...
%     'Position', [0.1 0.05 0.8 0.03], ...
%     'Style', 'slider', ...
%     'BackgroundColor', backgroundColor, ...
%     'ForegroundColor', foregroundColor, ...
%     'FontWeight', 'bold', ...
%     'FontSize', 8, ...
%     'Visible', 'on', ...
%     'Callback', {@set_time_window, Hmain.mainAxes}, ...
%     'FontName', defaultFontName);

Hmain.sliderAxes = axes('parent', Hmain.panelaxes,...
    'Units', 'normalized', ...
    'Position', [0.1 0.04 0.8 0.07], ...
    'Color', backgroundColor, ...
    'Color', backgroundColor, ...
    'XColor', foregroundColor, ...
    'YColor', foregroundColor, ...
    'GridColor', foregroundColor, ...
    'FontWeight', 'bold', ...
    'FontSize', 8, ...
    'FontName', defaultFontName, ...   
    'Visible', 'off', ...
    'Box', 'on', ...
    'XLimMode', 'auto', ...
    'YLimMode', 'auto', ...
    'XGrid', 'off', ...
    'YGrid', 'off');

Hmain.mainSliderMin = uicontrol('Parent', Hmain.panelaxes, ...
    'Style', 'edit', ...
    'BackgroundColor', backgroundColor, ...
    'ForegroundColor', foregroundColor, ...
    'Units', 'normalized', ...
    'Position', [0.05 0.06 0.04 0.05], ...
    'FontWeight', 'bold', ...
    'FontAngle', 'italic', ...
    'Callback', {@set_time_window_min, Hmain.mainAxes, Hmain.sliderAxes}, ...
    'String', 'min');

Hmain.mainSliderMax = uicontrol('Parent', Hmain.panelaxes, ...
    'Style', 'edit', ...
    'BackgroundColor', backgroundColor, ...
    'ForegroundColor', foregroundColor, ...
    'Units', 'normalized', ...
    'Position', [0.91 0.06 0.04 0.05], ...
    'FontWeight', 'bold', ...
    'FontAngle', 'italic', ...
    'Callback', {@set_time_window_max, Hmain.mainAxes, Hmain.sliderAxes}, ...
    'String', 'max');

Hmain.buttonBw1 = uicontrol('Parent', Hmain.panelaxes, ...
    'Style', 'pushbutton', ...
    'BackgroundColor', backgroundColor, ...
    'ForegroundColor', foregroundColor, ...
    'Units', 'normalized', ...
    'Position', [0.05 0.03 0.02 0.03], ...
    'FontWeight', 'bold', ...
    'FontAngle', 'italic', ...
    'Callback', {@set_time_window_min, Hmain.mainAxes, Hmain.sliderAxes}, ...
    'String', '<<');
Hmain.buttonBw2 = uicontrol('Parent', Hmain.panelaxes, ...
    'Style', 'pushbutton', ...
    'BackgroundColor', backgroundColor, ...
    'ForegroundColor', foregroundColor, ...
    'Units', 'normalized', ...
    'Position', [0.07 0.03 0.02 0.03], ...
    'FontWeight', 'bold', ...
    'FontAngle', 'italic', ...
    'Callback', {@set_time_window_min, Hmain.mainAxes, Hmain.sliderAxes}, ...
    'String', '<');
Hmain.buttonFw1 = uicontrol('Parent', Hmain.panelaxes, ...
    'Style', 'pushbutton', ...
    'BackgroundColor', backgroundColor, ...
    'ForegroundColor', foregroundColor, ...
    'Units', 'normalized', ...
    'Position', [0.91 0.03 0.02 0.03], ...
    'FontWeight', 'bold', ...
    'FontAngle', 'italic', ...
    'Callback', {@set_time_window_min, Hmain.mainAxes, Hmain.sliderAxes}, ...
    'String', '>>');
Hmain.buttonFw2 = uicontrol('Parent', Hmain.panelaxes, ...
    'Style', 'pushbutton', ...
    'BackgroundColor', backgroundColor, ...
    'ForegroundColor', foregroundColor, ...
    'Units', 'normalized', ...
    'Position', [0.93 0.03 0.02 0.03], ...
    'FontWeight', 'bold', ...
    'FontAngle', 'italic', ...
    'Callback', {@set_time_window_min, Hmain.mainAxes, Hmain.sliderAxes}, ...
    'String', '>');


%% Main plot
nirsdata = table2array(DataNIRS.Data(:,6:197));
channelColors = lines(size(nirsdata, 2));
aa = 1;
axes(Hmain.mainAxes)
axis tight
cla;
hold on
for ii = 1:1:size(nirsdata,2)
    hSensors(ii) = plot(DataNIRS.Data.reltime, nirsdata(:,ii), 'LineWidth', 1, 'LineStyle', '-');
    set(hSensors(ii), 'Color', channelColors(ii,:));
    aa = aa+1;
end
hSensors_selection = findall(hSensors, 'Type', 'Line');
set(hSensors_selection, 'buttonDownFcn', {@change_line_width, channelColors, get(hSensors_selection(1), 'LineWidth'), 2})
Hmain.mainAxes.XLabel.String = 'Time (s)';
Hmain.mainAxes.YLabel.String = 'Intensity (a.u.)';
x2 = 1:1:size(nirsdata,1);
y2 = 1:1:size(nirsdata,1);
line(x2, y2, 'Parent', Hmain.mainAxes2, 'Color', 'none')
Hmain.mainAxes2.XLabel.String = 'Time (samples)';
Hmain.mainAxes2.YTickLabel = [];

%% Overall plot
axes(Hmain.sliderAxes)
axis tight
cla;
hold on
for ii = 1:1:size(nirsdata,2)
    hSensors(ii) = plot(DataNIRS.Data.reltime, nirsdata(:,ii), 'LineWidth', 1, 'LineStyle', '-');
    set(hSensors(ii), 'Color', channelColors(ii,:));
    aa = aa+1;
end
Hmain.mainSliderMin.String = num2str(DataNIRS.Data.reltime(1));
Hmain.mainSliderMax.String = num2str(DataNIRS.Data.reltime(end));
hrect = rectangle('Position', [str2double(Hmain.mainSliderMin.String) min(nirsdata(:)) str2double(Hmain.mainSliderMax.String)-str2double(Hmain.mainSliderMin.String) max(nirsdata(:))-min(nirsdata(:))], 'Curvature', [0 0], 'EdgeColor', foregroundColor);
hSensors_selection = findall(hSensors, 'Type', 'Line');
set(hSensors_selection, 'buttonDownFcn', {@move_rectangle, Hmain.mainAxes, hrect, Hmain.mainSliderMin, Hmain.mainSliderMax});

%% Populate metadata

%% Turn figure on
Hmain.mainFigure.Visible = 'on';
